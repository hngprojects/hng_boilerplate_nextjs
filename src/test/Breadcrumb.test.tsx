import { render, screen } from "@testing-library/react";

import { Breadcrumb } from "~/components/common/Breadcrumb";

const mockUsePathname = vi.fn();

vi.mock("next/navigation", () => ({
  usePathname() {
    return mockUsePathname();
  },
}));

describe("breadcrumb: Unit Testing", () => {
  it("should have pages shown in the same order of the URL", () => {
    expect.hasAssertions();
    mockUsePathname.mockImplementation(() => "/");
    render(
      <Breadcrumb
        pages={[
          { name: "Home", href: "/" },
          { name: "Jobs", href: "/jobs" },
          { name: "Job 1", href: "/jobs/1" },
        ]}
      />,
    );
    const links = screen.getAllByRole("link");
    expect(links[0]).toHaveTextContent(/^Home$/);
    expect(links[0].getAttribute("href")).toMatchInlineSnapshot(`"/"`);
    expect(links[1]).toHaveTextContent(/^Jobs$/);
    expect(links[1].getAttribute("href")).toMatchInlineSnapshot(`"/jobs"`);
    expect(links[2]).toHaveTextContent(/^Job 1$/);
  });
  it("should have the current page appear inactive, not clickable and as last page", () => {
    expect.hasAssertions();
    mockUsePathname.mockImplementation(() => "/");
    render(
      <Breadcrumb
        pages={[
          { name: "Home", href: "/" },
          { name: "Jobs", href: "/jobs" },
          { name: "Job 1", href: "/jobs/1", isCurrent: true },
        ]}
      />,
    );
    const links = screen.getAllByRole("link");
    const lastLink = links.at(-1);
    expect(lastLink).toHaveAttribute("aria-current", "page");
    expect(lastLink).toHaveAttribute("aria-disabled", "true");
    expect(lastLink).not.toHaveAttribute("href");
  });
  it("should have pages autogenerated if not provided", () => {
    expect.hasAssertions();
    mockUsePathname.mockImplementation(() => "/guide/breadcrumb");
    render(<Breadcrumb />);
    const links = screen.getAllByRole("link");
    expect(links[0]).toHaveTextContent(/^home$/i);
    expect(links[1]).toHaveTextContent(/^guide$/i);
    expect(links[1].getAttribute("href")).toMatchInlineSnapshot(`"/guide"`);
    expect(links[2]).toHaveTextContent(/^breadcrumb$/i);
    expect(links[2]).not.toHaveAttribute("href");
  });
  it("should have the last autogenerated page as the current page", () => {
    expect.hasAssertions();
    mockUsePathname.mockImplementation(() => "/guide/breadcrumb");
    render(<Breadcrumb />);
    const links = screen.getAllByRole("link");
    const lastLink = links.at(-1);
    expect(links).toHaveLength(3);
    expect(lastLink).toHaveAttribute("aria-current", "page");
    expect(lastLink).toHaveAttribute("aria-disabled", "true");
    expect(lastLink).not.toHaveAttribute("href");
  });
  it("should show ellipsis if there are more pages than maxPages", () => {
    expect.hasAssertions();

    const PAGES_TO_DISPLAY = 3;
    const pagePathname = "/guide/components/breadcrumb/index";
    const paths = pagePathname.split("/");
    const ellipsisHref = paths
      .slice(0, paths.length - PAGES_TO_DISPLAY + 1)
      .join("/");
    mockUsePathname.mockImplementation(() => pagePathname);

    render(<Breadcrumb maxPages={PAGES_TO_DISPLAY} />);
    const links = screen.getAllByRole("link");
    const ellipsisLink = links.at(-PAGES_TO_DISPLAY);
    expect(links).toHaveLength(PAGES_TO_DISPLAY + 1);
    expect(ellipsisLink).toHaveTextContent("More");
    expect(ellipsisLink).toHaveAttribute("href", ellipsisHref);
  });
  it("should not show ellipsis if there are less pages than maxPages", () => {
    expect.hasAssertions();

    const PAGES_TO_DISPLAY = 8;
    const pagePathname = "/guide/components/breadcrumb/index";
    const paths = pagePathname.split("/");
    mockUsePathname.mockImplementation(() => pagePathname);

    render(<Breadcrumb maxPages={PAGES_TO_DISPLAY} />);
    const links = screen.getAllByRole("link");
    expect(links).toHaveLength(paths.length);
    for (const link of links) {
      expect(link).not.toContainHTML(`<span class="sr-only">More</span>`);
    }
  });
});
